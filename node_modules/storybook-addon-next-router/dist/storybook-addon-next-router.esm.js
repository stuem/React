import { action } from '@storybook/addon-actions';
import { makeDecorator } from '@storybook/addons';
import React from 'react';
import Router from 'next/router';
import { RouterContext } from 'next/dist/next-server/lib/router-context';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var withNextRouter = /*#__PURE__*/makeDecorator({
  name: 'NextRouter',
  parameterName: 'nextRouter',
  wrapper: function wrapper(getStory, context, settings) {
    Router.router = _extends({
      route: '/',
      pathname: '/',
      query: {},
      asPath: '/',
      push: function push(url, as, options) {
        action('nextRouter.push')(url, as, options);
        return Promise.resolve(true);
      },
      replace: function replace(url, as, options) {
        action('nextRouter.replace')(url, as, options);
        return Promise.resolve(true);
      },
      reload: function reload() {
        action('nextRouter.reload')();
      },
      back: function back() {
        action('nextRouter.back')();
      },
      prefetch: function prefetch(url, asPath, options) {
        action('nextRouter.prefetch')(url, asPath, options);
        return Promise.resolve();
      },
      beforePopState: function beforePopState(cb) {
        action('nextRouter.beforePopState')(cb);
      },
      events: {
        on: function on(type, handler) {
          action('nextRouter.events.on')(type, handler);
        },
        off: function off(type, handler) {
          action('nextRouter.events.off')(type, handler);
        },
        emit: function emit(type) {
          action('nextRouter.events.emit')(type);
        }
      },
      isFallback: false
    }, settings.options, settings.parameters);
    return React.createElement(RouterContext.Provider, {
      value: Router.router
    }, getStory(context));
  }
});

export { withNextRouter };
//# sourceMappingURL=storybook-addon-next-router.esm.js.map
