"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@chakra-ui/core");

var _modalContext = require("./modalContext");

const ModalSelector = (_ref) => {
  let {
    left,
    // 傳入左邊的數據
    value,
    // 傳入中間顯示的數據
    right,
    // 傳入右邊的數據
    modalTitle,
    // 傳入 modal 的標題
    onChange,
    // 傳入 onChange 事件
    children // 傳入左邊的數據

  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, ["left", "value", "right", "modalTitle", "onChange", "children"]);
  const {
    isOpen,
    onOpen,
    onClose
  } = (0, _core.useDisclosure)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_core.Button, (0, _extends2.default)({
    as: "div",
    maxW: "400px",
    lineHeight: "40px",
    width: "35%",
    textAlign: "center",
    mx: 3,
    borderColor: "#CBD5E0",
    variant: "outline",
    fontSize: {
      base: '14px',
      md: '16px'
    },
    overflow: "hidden",
    d: "block",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis",
    onClick: onOpen
  }, props), value), isOpen && /*#__PURE__*/_react.default.createElement(_core.Modal, {
    isOpen: isOpen,
    onClose: onClose,
    scrollBehavior: "inside"
  }, /*#__PURE__*/_react.default.createElement(_core.ModalOverlay, null), /*#__PURE__*/_react.default.createElement(_core.ModalContent, null, !!modalTitle && /*#__PURE__*/_react.default.createElement(_core.ModalHeader, null, modalTitle), /*#__PURE__*/_react.default.createElement(_core.ModalCloseButton, null), /*#__PURE__*/_react.default.createElement(_core.ModalBody, null, /*#__PURE__*/_react.default.createElement(_modalContext.ModalContext.Provider, {
    value: {
      value,
      // 給 Context 組件包住的兒子賦予 value 值
      onChange,
      // 給 Context 組件包住的兒子賦予 onChange 值
      onClose // 給 Context 組件包住的兒子賦予 onClose 值，關閉

    }
  }, children)))));
};

var _default = ModalSelector;
exports.default = _default;