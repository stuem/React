"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.useFocusElement = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _focusTrap = _interopRequireWildcard(require("focus-trap"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// import {
//   Modal,
//   ModalOverlay,
//   ModalContent,
//   ModalHeader,
//   ModalCloseButton,
//   ModalBody
// } from '@chakra-ui/core'
const SectionContext = /*#__PURE__*/(0, _react.createContext)({
  parent: 'TableHead'
});

const TableHead = ({
  children
}) => {
  return /*#__PURE__*/_react.default.createElement("thead", null, /*#__PURE__*/_react.default.createElement(SectionContext.Provider, {
    value: {
      parent: 'TableHead'
    }
  }, children), /*#__PURE__*/(0, _react.cloneElement)(children, {
    parent: 'TableHead'
  }));
};

const TableBody = ({
  children
}) => {
  return /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement(SectionContext.Provider, {
    value: {
      parent: 'TableBody'
    }
  }, children), /*#__PURE__*/(0, _react.cloneElement)(children, {
    parent: 'TableBody'
  }));
};

const TableCell = ({
  children
}) => {
  const {
    parent
  } = (0, _react.useContext)(SectionContext);
  const Component = parent === 'TableHead' ? 'th' : 'td';
  return /*#__PURE__*/_react.default.createElement(Component, null, children);
};

const Table = () => /*#__PURE__*/_react.default.createElement("table", null, /*#__PURE__*/_react.default.createElement(TableHead, null, /*#__PURE__*/_react.default.createElement(TableCell, null, "Name"), /*#__PURE__*/_react.default.createElement(TableCell, null, "Age")), /*#__PURE__*/_react.default.createElement(TableBody, null, /*#__PURE__*/_react.default.createElement(TableCell, null, "Ben McMahen"), /*#__PURE__*/_react.default.createElement(TableCell, null, "Thirty-something")));

const useFocusElement = (elementRef, showing, options = {}) => {
  // const elementRef = React.useRef(null)
  console.log('elementRef', elementRef.current);

  const trapRef = _react.default.useRef(null);

  const focusElement = () => {
    if (!elementRef.current) {
      console.error('No element found to found');
      return null;
    }

    elementRef.current.style.color = 'red';
    console.log(elementRef.current);
    const trap = (0, _focusTrap.default)(elementRef.current, _objectSpread({
      escapeDeactivates: false,
      clickOutsideDeactivates: true,
      fallbackFocus: elementRef.current
    }, options));
    trapRef.current = trap;
    trap.activate();
  };

  const focusTrigger = () => {
    if (trapRef.current) {
      trapRef.current.deactivate();
    }
  };

  (0, _react.useEffect)(() => {
    if (showing) focusElement();else focusTrigger();
  }, [showing]);
  return {
    bind: {
      ref: elementRef,
      tref: trapRef
    }
  };
};

exports.useFocusElement = useFocusElement;
var _default = Table;
exports.default = _default;